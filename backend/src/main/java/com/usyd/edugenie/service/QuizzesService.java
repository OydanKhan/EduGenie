package com.usyd.edugenie.service;

import com.google.api.client.util.Lists;
import com.google.common.collect.Maps;
import com.usyd.edugenie.entity.Quizzes;
import com.usyd.edugenie.entity.Users;
import com.usyd.edugenie.entity.Tag;
import com.usyd.edugenie.entity.QuizTags;
import com.usyd.edugenie.model.TagScore;
import com.usyd.edugenie.repository.QuizzesRepository;
import com.usyd.edugenie.repository.QuizTagsRepository;
import com.usyd.edugenie.repository.TagRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;
import java.time.LocalDateTime;


@Service
public class QuizzesService {

    @Autowired
    private QuizzesRepository quizzesRepository;

    @Autowired
    private QuizTagsRepository quizTagsRepository;

    @Autowired
    private TagRepository tagRepository;

    public Quizzes createQuiz(Quizzes quiz) {
        return quizzesRepository.save(quiz);
    }

    public Optional<Quizzes> getQuizById(UUID quizId) {
        return quizzesRepository.findById(quizId);
    }

    public List<Quizzes> getQuizzesByUser(Users user) { return quizzesRepository.findByUser(user); }

    public List<Quizzes> getAllQuizzes() {
        return quizzesRepository.findAll();
    }

    public void deleteQuiz(UUID quizId) {
        quizzesRepository.deleteById(quizId);
    }

    public Optional<Quizzes> getMostRecentQuiz() {
        return quizzesRepository.findTopByOrderByGeneratedDateDesc();
    }

    public Quizzes updateQuiz(Quizzes quiz) {
        return quizzesRepository.save(quiz);
    }

    public List<Quizzes> getQuizzesByUserSortedByDate(Users user) {
        // get all quizzes by user
        List<Quizzes> userQuizzes = quizzesRepository.findByUser(user);

        userQuizzes.sort((quiz1, quiz2) -> {
            LocalDateTime date1;
            LocalDateTime date2;

            // if attempt date does not exist, use generated date
            if (quiz1.getLastAttemptDate() != null) {
                date1 = quiz1.getLastAttemptDate();
            } else {
                date1 = quiz1.getGeneratedDate();
            }

                // if attempt date does not exist, use generated date
            if (quiz2.getLastAttemptDate() != null) {
                date2 = quiz2.getLastAttemptDate();
            } else {
                date2 = quiz2.getGeneratedDate();
            }

            // compare the two dates to sort in descending order
            if (date2.isAfter(date1)) {
                return 1;  // sorted like (quiz2, quiz1)
            } else if (date2.isBefore(date1)) {
                return -1;  // sorted like (quiz1, quiz2)
            } else {
                return 0;  // quiz1 and quiz2 have the same date, do not need to change
            }
        });
        return userQuizzes;
    }

    // extracts tags associated with a quiz
    public List<Tag> getTagsForQuiz(UUID quizId) {
        return quizTagsRepository.findTagsByQuizId(quizId);
    }

    public void addTagToQuiz(UUID quizId, UUID tagId) {
        // Find the quiz and tag
        Quizzes quiz = quizzesRepository.findById(quizId).orElseThrow(() -> new RuntimeException("Quiz not found"));
        Tag tag = tagRepository.findById(tagId).orElseThrow(() -> new RuntimeException("Tag not found"));

        QuizTags quizTag = new QuizTags(quiz, tag);
        quizTagsRepository.save(quizTag);
    }

    // extracts all tags from all quizzes generated by user
    public Set<String> getTagsForUserQuizzes(Users user) {
        List<Quizzes> userQuizzes = getQuizzesByUserSortedByDate(user); // Get all of user's quizzes
        Set<String> tags = new HashSet<>();

        for (Quizzes quiz : userQuizzes) {
            List<String> quizTags = quizTagsRepository.findTagNamesByQuizId(quiz.getQuizId());
            tags.addAll(quizTags);
        }

        return tags;
    }

    public List<TagScore> getTagScoreForUser(Users user) {
        List<Quizzes> userQuizzes = getQuizzesByUserSortedByDate(user); // Get all of user's quizzes
        List<Quizzes> submittedQuizzes = userQuizzes.stream().filter(quiz -> quiz.getLastAttemptDate() != null).toList();
        Map<String, List<Double>> tagScoreList = Maps.newHashMap();

        for (Quizzes quiz : submittedQuizzes) {
            List<String> quizTags = quizTagsRepository.findTagNamesByQuizId(quiz.getQuizId());
            if (quizTags.isEmpty()) {
                continue;
            }

            double resultOfThisQuiz = (double) quiz.getScore() / quiz.getTotalQuestions();
            for (String tag : quizTags) {
                if (!tagScoreList.containsKey(tag)) {
                    tagScoreList.put(tag, Lists.newArrayList());
                }
                List<Double> scoreList = tagScoreList.get(tag);
                scoreList.add(resultOfThisQuiz);
            }
        }
        System.out.println("tagScoreList: " + tagScoreList);

        List<TagScore> tagAvgScore = Lists.newArrayList();
        for (String tag : tagScoreList.keySet()) {
            TagScore tagScore = new TagScore();
            List<Double> scores = tagScoreList.get(tag);
            tagScore.setTag(tag);
            double avgOfTag = scores.stream().mapToDouble(i -> i).average().orElse(0.0);
            tagScore.setAvgScore((int) Math.round(avgOfTag * 100));
            tagAvgScore.add(tagScore);
        }

        System.out.println("tagAvgScore: " + tagAvgScore);
        return tagAvgScore;
    }
}
